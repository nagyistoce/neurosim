
/*!
 * \class SpikeEvents
 *
 * \brief Models spike events
 *
 * Models spike events
 *
 * \note 
 *
 * \author $Author: Dmitri Yudanov $
 *
 * \version $Revision: 1.0 $
 *
 * \date $Date: 2012/04/17 14:16:20 $
 *
 * Contact: dxy7370@gmail.com
 *
 * Created on: Wed Apr 13 18:39:37 2005
 *
 */

#ifndef EXPAND_EVENTS_H_
#define EXPAND_EVENTS_H_



#include "Definitions.hpp"



class SpikeEvents 
{
/**************************************************************************************************/
  public:  /*public variables*/
/**************************************************************************************************/
  
  
  
  cl::Buffer dataSpikePacketsBuffer;
  cl::Buffer dataSpikePacketCountsBuffer;
  
  
  
/**************************************************************************************************/
  private:  /*private variables*/
/**************************************************************************************************/



  bool resetObject;
  bool dataValid;
  
  unsigned int srandSeed;
  unsigned int srandCounter;
  
  cl_uint neuronCount;
  cl_uint spikePacketSize;
  cl_uint spikePacketSizeWords;
  cl_uint spikePackets;
  cl_uint simulationTimeSteps;
  cl_uint spikeDatumSize;
  
  std::stringstream *dataToSimulationLogFile;
  std::stringstream *dataToReportLogFile;
  
  cl_uint dataSpikePacketsSize;
  cl_uint dataSpikePacketsSizeBytes;
  cl_uint *dataSpikePackets;
  
  cl_uint dataSpikePacketCountsSize;
  cl_uint dataSpikePacketCountsSizeBytes;
  cl_uint *dataSpikePacketCounts;

  cl_uint *dataPastSpikePackets;
  cl_uint *dataPastSpikePacketCounts;
  
/**************************************************************************************************/
  public: /*public methods*/
/**************************************************************************************************/


  
/**************************************************************************************************/
  SpikeEvents
  ();
/**************************************************************************************************/



/**************************************************************************************************/
  ~SpikeEvents
  ();
/**************************************************************************************************/



/**************************************************************************************************/
  void
  initialize
  (
    cl::Context&,
    cl::Device&,
    cl_uint, 
    cl_uint,
    cl_uint, 
    cl_uint,
    cl_uint, 
    cl_uint,
    struct kernelStatistics*,
    std::stringstream*,
    std::stringstream*
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  clearEvents
  (
    cl::CommandQueue&,
    cl_bool
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void 
  setEvents
  (
    cl::CommandQueue&,
    cl_bool,
    double,
    double,
    double
  );
/**************************************************************************************************/



/**************************************************************************************************/
  cl_uint
  getSpikeCount
  (
    cl::CommandQueue&,
    cl_uint
  );
/**************************************************************************************************/



/**************************************************************************************************/
  cl_uint
  getPastSpikeCount
  (
    cl::CommandQueue&,
    cl_uint
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  getSpike
  (
    cl::CommandQueue&,
    cl_uint,
    cl_uint,
    cl_uint&,
    CL_DATA_TYPE&
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  getPastSpike
  (
    cl::CommandQueue&,
    cl_uint,
    cl_uint,
    cl_uint&,
    CL_DATA_TYPE&
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void 
  deletePastEvents
  ();
/**************************************************************************************************/


/**************************************************************************************************/
  void 
  invalidateEvents
  ();
/**************************************************************************************************/



/**************************************************************************************************/
  private:  /*private methods*/
/**************************************************************************************************/



/**************************************************************************************************/
  void
  getSpikeEvents
  (
    cl::CommandQueue&,
    cl_bool
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  getPastSpikeEvents
  (
    cl::CommandQueue&,
    cl_bool
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  reset
  (
    bool
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  storeBuffers
  (
    cl::CommandQueue&,
    cl_bool
  );
/**************************************************************************************************/



/**************************************************************************************************/
  void
  isInitialized
  ();
/**************************************************************************************************/
};

#endif
